/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 0 auto;
}

section {
  padding: 3rem 0;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}

/*Focus*

When we interact with one of these elements (either by clicking on it or tabbing to it), it becomes focused. It'll capture keyboard input, so we can type into a form field or press "Enter" to follow a link.

The :focus pseudo-class allows us to apply styles exclusively when an interactive element has focus:

For most users, a button can be focused by clicking on it. Focus can then be moved between buttons by pressing ‚ÄúTab‚Äù (to go forward) or ‚ÄúShift‚Äù + ‚ÄúTab‚Äù (to go backwards).

Focus styles are primarily useful for folks who don't use a "pointer-style" input device (like a mouse, a trackpad, or a finger on a touchscreen). For example, I built the foundations of this course platform without the use of a keyboard/mouse, due to a repetitive stress injury; initially, I did all of my navigation by voice, speaking "tab" into a microphone to move between focused elements. The focus styles show you where you are on the page, which element is selected.

Fortunately, browsers do come with default focus styles. It varies by browser, but it's typically either a blue or dotted outline. */

/*:checked

The :checked pseudo-class only applies to checkboxes and radio buttons that are "filled in". You can apply additional styles to indicate that the input is activated:

Browsers don't offer too much flexibility when it comes to checkboxes and radio buttons, but this neat trick lets you apply certain CSS properties depending on its status.*/

input:checked {
  width: 24px;
  height: 24px;
}


/*first/last child

Pseudo-classes aren't just for states like hover/focus/checked! They can also help us apply conditional logic.

The :last-child pseudo-class will only select <p> tags which are the final element within its container. It needs to be the last child within its parent.

Similarly, the :first-child pseudo-class will match the first child within a parent container. */

li:first-child {
  color: red;
}

li:last-child {
  color: green;
}


/*:first-of-type and :last-of-type

In addition to :first-child and :last-child, we also have :first-of-type and :last-of-type. They're almost identical, but they have one critical difference.

:first-of-type depends on the type of the HTML tag.*/

 p:first-of-type {
    color: red;
  }


/*Pseudo-elements

Pseudo-elements are like pseudo-classes, but they don't target a specific state. Instead, they target "sub-elements" within an element.

For example, we can style the placeholder text in a form input with ::placeholder

In terms of syntax, pseudo-elements use two colons instead of one (::), though some pseudo-elements also support single-colon syntax.

If we stop and think about it, something pretty interesting is happening here. We haven't explicitly created a <placeholder> element, but by adding the placeholder attribute to the <input> tag, a pseudo-element is created.

This is why they're called pseudo-elements ‚Äî these selectors target elements in the DOM that we haven't explicitly created with HTML tags.

Placeholders are criticized because the text is typically very light; if someone has poor vision, they might not be able to read the text at all.

Here's the thing, though: placeholders aren't meant to contain critical information. They're meant to provide an example, to give folks an idea about how to format their data. They should never be used to label an input (use a <label> element instead).

What if the user can't read the placeholder, and enters data in an incorrect format? First, we should build forms that are flexible and support a wide range of user inputs. With the power of JavaScript, we can transform their input into a standardized format!

But, if they really do enter invalid data, a helpful error message should be shown. It should explain what the user did wrong, and how to fix it. And it should be bright and high-contrast.

Here's a quick test you can use to check if you're using placeholders correctly: if you were to remove all of the placeholders from the form, would it still be usable, and easy to fill out? If the answer is ‚Äúno‚Äù, you have some work to do.*/


input {
  font-size: 1rem;
}
input::placeholder {
  color: goldenrod;
}



/*before and after

There is no significant difference in terms of performance between these two examples. ::before and ::after are really just secret spans.

In general, we probably shouldn't use these two pseudo-elements. In a vanilla HTML/CSS world, it can be helpful to "bundle" content in with a CSS selector. In the era of components, however, we have better ways of bundling content.

There are also some accessibility concerns with ::before and ::after. Some screen readers? will try to vocalize the content. Others will ignore them entirely. This inconsistency is problematic.

That said, if the effect is entirely decorative (eg. colorful shapes), I believe it's fine to create them with an empty content string:*/


h6::before {
  content: '';
  display: block;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: peachpuff;
  margin: 8px;
}


/*Combinators

By putting a space between nav and a, we're combining two selectors in a very specific way: we're saying that the styles should only apply to a tags that are nested within nav tags. The first two links in the snippet qualify, but the last one doesn't.

The term ‚Äúcombinator‚Äù refers to a character that combines multiple selectors. In this case, the space character combines nav and a to create a descendant selector.

The descendant selector will apply to all descendants, no matter how deeply nested they are. For example, the anchor tags will still work even if they're inside a list:*/


nav a {
  color: red;
  font-weight: bold;
}

/*Direct Child

In CSS, we can differentiate between children and descendants. Think of a family tree: a child is only one level down from the parent. A descendant might be 1 level down (child), 2 levels down (grandchild), 3 levels down‚Ä¶

What if we only want to target children, and not deeper descendants?

Here's an example using another combinator.*/

li {
    margin-bottom: 8px;
}
  
.main-list > li {
  border: 2px dotted;
}

/*Exercise*/

article p:nth-of-type(1)  {
  color: black;
}

article a {
  color: deeppink;
  text-decoration: none;
}

article a:hover {
  text-decoration: underline;
}

aside p:last-of-type {
  margin-bottom: 0;
}

aside {
  background: peachpuff;
  border: 2px solid;
  padding: 16px;
}

aside a {
  color: black;
  text-decoration: underline;
}

aside a:hover {
  text-decoration: none;
}


/*Color*/

.box {
  width: 50px;
  height: 50px;
}

.first.box {
  background-color: hsl(340deg 100% 50% / 1);
}
.second.box {
  background-color: hsl(340deg 100% 50% / 0.75);
}
.third.box {
  background-color: hsl(340deg 100% 50% / 0.5);
}
.fourth.box {
  background-color: hsl(340deg 100% 50% / 0.25);
}


/*UNITS*

Pixels are nice because they correspond more-or-less with what you see on the screen*

The em unit is an interesting fellow. It's a relative unit, equal to the font size of the current element.

If a heading has a font-size of 24px, and we give it a bottom padding of 2em, we can expect that the element will have 48px of cushion underneath it (2 √ó 24px).

Using em means that a component's UI will change depending on the font size of the container it's placed within. This can be useful, but more often than not

It was introduced because there's a common frustrating issue with the em unit: it compounds.

For example, consider the following snippet:

HTML
<style>
  main {
    font-size: 1.125em;
  }
  article {
    font-size: 0.9em;
  }
  p.intro {
    font-size: 1.25em;
  }
</style>
<main>
  <article>
    <p class="intro">
      What size is this text?
    </p>
  </article>
</main>

How large, in pixels, is that .intro paragraph font?

To figure it out, we have to multiply each ratio. The root font size is 16px by default, and so the equation is 16 √ó 1.125 √ó 0.9 √ó 1.25. The answer is 20.25 pixels.

What? Why?? This happens because font size is inheritable. The paragraph has a font size of 1.25em, which means ‚Äú1.25x the current font size‚Äù. But what is the current font size? Well, it gets inherited from the parent: 0.9em. And so it's 1.25x the parent, which is 0.9x its parent, which is 1.125x its parent.

Essentially, we need to multiply every em value in the tree until we either hit a "fixed" value (using pixels), or we make it all the way to the top of the tree. This is exactly as gnarly as it sounds. üò¨

To solve this problem, the CSS language designers created the rem unit. It stands for ‚ÄúRoot EM‚Äù.

The rem unit is like the em unit, except it's always a multiple of the font size on the root node, the <html> element. It ignores any inherited font sizes, and always calculates based on the top-level node.

A rare opportunity for the ‚Äúem‚Äù unit
When I need a relative unit, I almost always reach for rem. It's much simpler and more predictable than em, for the ‚Äúcompounding‚Äù issues discussed earlier.

That said, the em unit works particularly well when it comes to margins on headings and paragraphs.

As an example, here's how I might style the headings using rems:

CSS
h1 {
  font-size: 3rem
  margin-top: 6rem;
  margin-bottom: 1.5rem;
}
h2 {
  font-size: 2rem
  margin-top: 4rem;
  margin-bottom: 1rem;
}
h3 {
  font-size: 1.5rem;
  margin-top: 3rem;
  margin-bottom: 0.75rem;
}
Because each heading level has its own font size, we need to calculate unique margin values for each one.

Here's the exact same UI, described using em instead:

CSS
h1 {
  font-size: 3rem;
}
h2 {
  font-size: 2rem;
}
h3 {
  font-size: 1.5rem;
}
h1, h2, h3 {
  margin-top: 2em;
  margin-bottom: 0.5em;
}
Each heading level has a unique font size, but with em, they can share their margin declarations. This is because em is calculated based on the current element's font size.

In other words, we're saying that each heading level should have ‚Äú2x‚Äù top margin, and ‚Äú0.5x‚Äù bottom margin. Those ratios are applied to the heading's font size.

Ultimately, both approaches are 100% valid, and equally accessible. I just wanted to share this neat little em trick. üòÑ

Rems
The rem unit is quite a lot like the em unit, with one crucial difference: it's always relative to the root element, the <html> tag.

No matter where an element is in the DOM tree, the rem is consistent.

It behaves consistently and predictably, like pixels, but it respects user preferences when it comes to increasing/decreasing default font sizes.

Leveraging CSS variables
This is my favourite option. Here's what it looks like:

CSS
html {
  --14px: 0.875rem;
  --15px: 0.9375rem;
  --16px: 1rem;
  --17px: 1.0625rem;
  --18px: 1.125rem;
  --19px: 1.1875rem;
  --20px: 1.25rem;
  --21px: 1.3125rem;
}
h1 {
  font-size: var(--21px);
}

or

html {
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-md: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.3125rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 2.652rem;
  --font-size-4xl: 4rem;
}


STYLES AND SEMANTICS

Styles and semantics
CSS allows us to change the cosmetic presentation of text, but it doesn't affect the semantic meaning of the markup. For that, we need to use specialized HTML tags.

The <strong> HTML tag is meant to convey that an element is critically important or urgent, like ‚ÄúWarning: Product may explode if shaken‚Äù.

The <em> HTML tag is used for emphasis, the way one might emphasize a particular word in a sentence, like ‚Äúthese pretzels are making me thirsty.‚Äù

Semantics are important because not everyone can see the cosmetic styles. For a variety of reasons, some people use assistive technologies like screen readers (software that reads the text using a synthesized voice) to help them navigate the web. When we use the <em> tag, for example, the synthesized voice will stress the syllable much like a human would!

That said, this applies specifically to ‚Äúcopy‚Äù, the text content on our websites. We don't need to follow the same rules when it comes to UI elements. For example, we might want to make an input's <label> bold, and we can do this purely in CSS, without using a <strong> tag.


/*LINEHEIGHT

line-height is a bit of an odd duck because it takes a unitless number. This number is multiplied by the element's font-size to calculate the actual line height.

As an example, suppose we have the following CSS:

p {
  font-size: 2rem;
  line-height: 1.5;
}
We can calculate the actual height of each line by multiplying the font size (2rem) by the line-height (1.5), for a derived value of 3rem.

By default, browsers come with a surprisingly small amount of line height. In Chrome, the default value is 1.15. In Firefox, it's 1.2.

These default values produce densely-packed lines of text which can be hard to read for people who are dyslexic or have poor vision. To comply with accessibility guidelines, our body text should have a minimum line-height of 1.5. This is according to WCAG 1.4.12, Text Spacing guidelines.

p {
  line-height: 1.5;
}
It's possible to pass other unit types (eg. pixels, rems), but I recommend always using this unitless number, so that the line-height always scales with the element's font-size.



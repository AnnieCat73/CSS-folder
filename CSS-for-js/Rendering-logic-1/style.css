/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 0 auto;
}

section {
  padding: 3rem 0;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}



/*New reset

As we've learned, browsers come with a built-in set of CSS styles, known as the “User-Agent Stylesheet”.

Historically, the main goal of a CSS reset has been to ensure consistency between browsers, and to undo all default styles, creating a blank slate. My CSS reset doesn't really do either of these things.

These days, browsers don't have massive discrepancies when it comes to layout or spacing. By and large, browsers implement the CSS specification faithfully, and things behave as you'd expect. So it isn't as necessary anymore.

/*
  1. Use a more-intuitive box-sizing model.
*
*, *::before, *::after {
  box-sizing: border-box;
}

/*
  2. Remove default margin
*
* {
  margin: 0;
}

/*
  3. Allow percentage-based heights in the application
  As discussed in the “Height Algorithms” lesson, using the percentage unit for the height property won't always work. This only works if the parent defines an absolute height (eg. height: 400px), or if all of the ancestors use percentages, all the way up to the root HTML element.
  By setting html and body to have height: 100%, we make it easier for us to use percentage-based heights down the line, if we decide to.*
html, body {
  height: 100%;
}

/*
  Typographic tweaks!
  4. Add accessible line-height
  5. Improve text rendering
*
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

/*
  6. Improve media defaults

  If we try to use an inline element in our layout, though, weird things happen. We have to worry about inline magic space. By setting display: block on all media elements by default, we sidestep a whole category of funky issues.

  I also set max-width: 100%. This is done to keep large images from overflowing, if they're placed in a container that isn't wide enough to contain them. Because images/videos are replaced elements, they don't behave like other elements do.*
img, picture, video, canvas, svg {
  display: block;
  max-width: 100%;
}

/*
  7. Remove built-in form typography styles
*
input, button, textarea, select {
  font: inherit;
}

/*
  8. Avoid text overflows

  hyphens: auto uses hyphens (in languages that support them) to indicate hard wraps. It also makes hard wraps much more common.

  It can be worthwhile if you have very-narrow columns of text, but it can also be a bit distracting. I chose not to include it in the reset, but it's worth experimenting with!
*
p, h1, h2, h3, h4, h5, h6 {
  overflow-wrap: break-word;
  /*hyphens: auto;*
}

/*
  9. Create a root stacking context

  isolation property allows us to create a new stacking context without setting a z-index.

  By creating a stacking context on our application's container, we ensure that everything within our application will participate in an "app-specific" context, rather than the global top-level context. This makes it possible for us to guarantee that elements created using portals (eg. modals, tooltips) will always show up on top of our application.

  We're using the selector #__next here because in the Next.js framework, the application container is given this ID. The specific selector will vary depending on your framework; with Create React App, for example, the root container is #root.*
#root, #__next {
  isolation: isolate;
}


BUILT-IN DECLARATIONS

You don't quite start with a blank canvas; HTML tags do include a few minimal styles. For example, here are the built-in styles for <a> tags, in Chrome 86:

a {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}
These styles are part of the user-agent stylesheet. Each browser includes their own stylesheet full of base styles like this. There are some hard rules in the HTML specification, but for the most part, each browser comes up with its own default styles

As we saw earlier, these are the “built-in” styles for <a> tags:

a {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}
The trouble is that even though color is an inheritable property, it's being overwritten by the default style, color: -webkit-link?.
-webkit-link is a Chrome-specific alias for the default color. You shouldn't use this value in your CSS.

We can fix this by explicitly telling anchor tags to inherit their containing text color:

a {
  color: inherit;
}


INHERITANCE

List of CSS Properties that are Inherited
There doesn’t seem to be a single definitive source that lists all CSS properties that inherit, but below is a list that’s probably correct, based on a few sources:

border-collapse
border-spacing
caption-side
color
cursor
direction
empty-cells
font-family
font-size
font-style
font-variant
font-weight
font-size-adjust
font-stretch
font
letter-spacing
line-height
list-style-image
list-style-position
list-style-type
list-style
orphans
quotes
tab-size
text-align
text-align-last
text-decoration-color
text-indent
text-justify
text-shadow
text-transform
visibility
white-space
widows
word-break
word-spacing
word-wrap


THE CASCADE

Ex:

<style>
  p {
    font-weight: bold;
    color: hsl(0deg 0% 10%);
  }

  .introduction {
    color: violet;
  }
</style>

<p class="introduction">
  Hello world
</p>

We've created two rules, one targeting a tag (p), another targeting a class (introduction). Then, we've created an HTML element that matches them both.

You may already know what happens here: we wind up with a bold, violet paragraph. It plucks the font-weight declaration from the p tag, and the color declaration from the .introduction class.

When the browser needs to display our introduction paragraph on the screen, it first needs to figure out which declarations apply to it. And before it can do that, it needs to collect a set of matching rules. Once it has a list of applicable rules, it works out any conflicts. I imagine this as a sort of deathmatch: if multiple selectors each apply the same property, it pits them against each other. Two fighters enter, but only one emerges.

That's the main idea. The browser will take a set of applicable style rules, and whittle it down to a list of specific declarations that are applicable.

How does it determine which rules win each battle? It depends on the specificity of the selector.

The CSS language includes many different selectors, and each selector has a relative power. For example, classes are "more specific" than tags, so if there is a conflict between a class and a tag, the class wins. IDs, however, are more specific than classes.

 class styles are more specific than tag styles

 CHECK OUT ARTICLE ON CASCADE: https://wattenberger.com/blog/css-cascade


 LOGICAL PROPERTIES

Here are the built-in styles for p tags, in Chrome:

p {
  display: block;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
}

These properties are equivalent to the 4 cardinal directions: margin-top, margin-bottom, margin-left, and margin-right.

margin-block refers to the vertical axis. margin-block-start refers to the top, since block elements are stacked top-to-bottom. Similarly, margin-inline-start refers to the left edge, since "inline" is the horizontal direction, and words are placed left-to-right.

Why use these alternatives? Because not all languages are left-to-right, top-to-bottom. If you were to switch your browser's language to Arabic, margin-inline-start would add spacing to the right instead of to the left, since Arabic is a right-to-left language.

The main selling point for logical properties is internationalization. If you want your product to be available in a left-to-right language like English and a right-to-left language like Arabic, you can save yourself a lot of trouble by using logical properties.

The main argument against using logical properties is browser support. Now, to be clear, browser support for logical properties is very good—at the time of writing, 98% of devices support them. But there are some noticeable gaps, including Internet Explorer 10 and 11, Opera Mini, and relatively-recent versions of Safari.


THE BOX MODEL

Winter Layers
The four aspects that make up the box model are:

Content
Padding
Border
Margin

A helpful analogy is to imagine a person out for a winter walk, wearing a big poofy coat:

illustration of a man in a winter coat, with scarf and hat
The content is the person themselves, the human being inside the coat.
The padding is the polyester stuffing in the coat. The more stuffing there is, the more poofed-up the coat will be, and the more space the person will take up.
The border is the material of the coat. It has a thickness and a color, and it affects the person's appearance.
The margin is the person's “personal space”. As we've learned in recent years, it's good to have 2 meters (6 feet) of space around us.


BOX SIZING

The box-sizing CSS property allows us to change the rules for size calculations. The default value (content-box) only takes the inner content into account, but it offers an alternative value: border-box.

Instead of having to remember to swap box-sizing on every layout element, we can set it as the default value for all elements with this handy CSS snippet:

*,
*::before,
*::after {
  box-sizing: border-box;
}

You might be wondering: why do we need to add *::before and *::after? Shouldn't the wildcard selector (*) select everything?

Well, yes and no. The * selector will select all elements, but ::before and ::after aren't considered elements. They're pseudo-elements. And so we need to select them explicitly.


PADDING

A helpful way to think about padding is that it's "inner space".

Padding and units

em - so padding relative to font-size
rem, em - HE ARGUES THAT THE px is more accessible, can still zoom, scaling, same for margin and border 

NB Don't ever use %*/


/*em*/
header {
  font-size: 2rem;
  padding: 2em;
  background-color: peachpuff;
}
main {
  background: silver;
  padding: 2em;
}

/*rem*/

.rem-header {
  font-size: 2rem;
  padding: 2rem;
  background-color: peachpuff;
}
.rem {
  background: silver;
  padding: 2rem;
}

/*px*/

.px-header {
  font-size: 2rem;
  padding: 16px;
  background-color: peachpuff;
}

.px {
  background: silver;
  padding: 16px;
}

/*BORDER

There are three styles specific to border:

Border width (eg. 3px, 1em)
Border style (eg. solid, dotted)
Border color (eg. hotpink, black)
They can be combined into a shorthand:

.box {
  border: 3px solid hotpink;
}

If we don't specify a border color, it'll use the font's color by default. This isn't well-known, but it can be useful in cases where those things should be synchronized!

currentColor is always a reference to the element's derived text color (whether set explicitly or inherited), and it can be used anywhere a color might be used:

.box {
  color: hotpink;
  border: 1px solid currentColor;
  box-shadow: 2px 2px 2px currentColor;
}

Border vs Outline

The core difference is that outline doesn't affect layout. Outline is kinda more like box-shadow; it's a cosmetic effect draped over an element, without nudging it around, or changing its size.

Outlines share many of the same properties:

border-width becomes outline-width
border-color becomes outline-color
border-style becomes outline-style
Outlines are stacked outside border, and can sometimes be used as a "second border", for effect:

Outlines have a special outline-offset property. It allows you to add a bit of a gap between the element and its outline.*/

.box7 {
  width: 100px;
  height: 100px;
  border: 4px solid darkviolet;
  outline: 4px solid deeppink;
}

.outline-offset {
  width: 100px;
  height: 100px;
  border: 4px solid darkviolet;
  outline: 4px solid currentColor;
  outline-offset: 4px;
  margin-top: 2rem;
}

/*BORDER RADIUS*/

.box1 {
  width: 100px;
  height: 100px;
  border: 4px solid hotpink;
  border-radius: 25px;
  margin-bottom: 25px;
}

.box2 {
  width: 100px;
  height: 100px;
  border: 4px solid hotpink;
  border-radius: 10px 10px 40px 40px;
  margin-bottom: 25px;
}

.box3 {
  width: 100px;
  height: 100px;
  border: 4px solid hotpink;
  border-top-left-radius: 8px;
  border-top-right-radius: 16px;
  border-bottom-right-radius: 32px;
  border-bottom-left-radius: 64px;
  margin-bottom: 25px;
}

/*You can also use percentages; 50% will turn your shape into a circle or oval, since each corner's radius is 50% of the total width/height:*/

.box4 {
  width: 100px;
  height: 100px;
  border: 4px solid hotpink;
  border-radius: 50%;
}


/*Margin*

Margin increases the space around an element, giving it some breathing room. As we saw earlier, margin is "personal space".

In some ways, margin is the most amorphous and mysterious. It can do wacky things, like pull an element outside a parent, or center itself within its container.

Negative margin:

With padding and border, only positive numbers (including 0) are supported. With margin, however, we can drop into the negatives.

A negative margin can pull an element outside its parent

Negative margins can also pull an element's sibling closer

Margin, though, it's about changing the gap between elements. Negative margin shrinks the gap below an element, causing the next element to scoot up closer.

Finally, negative margin can affect the position of all siblings. Check out what happens when we apply negative margin to the first box in a series.
The interesting thing is those two black boxes: they "follow" the deep pink box up.When we use margin to tweak an element's position, we might also be tweaking every subsequent element as well.*/


.margin-wrapper {
  width: 200px;
  height: 200px;
  border: 3px solid;
  margin-top: 2rem;
}

.pink-box {
  width: 50%;
  height: 50%;
  border: 3px solid deeppink;
  background: white;
  margin-top: -32px;
  margin-left: -32px;
}

.neighbor-wrapper {
  width: 200px;
  height: 200px;
  border: 3px solid;
  margin-top: 2rem;
}

.neighbor {
  width: 50%;
  height: 50%;
  background: silver;
  margin-left: 16px;
}

.siblings-margin-wrapper {
  width: 200px;
  height: 200px;
  border: 3px solid silver;
  margin-top: 2rem;
}

.box {
  width: 25%;
  height: 25%;
  border: 3px solid;
  background: white;
}

.box.one {
  border-color: deeppink;
  margin-top: -24px;/*SO FOLLOW THIS ONE UP*/
}


/*Auto margins
Margins have one other trick up their sleeve: they can be used to center a child in a container.

Watch what happens when we set an element's left and right margin to auto. The auto value seeks to fill the maximum available space. If you take the free space around an element and distribute it evenly on both sides, you wind up centering that element.

Two caveats:

- This only works for horizontal margin. Setting top/bottom margin to auto is equivalent to setting it to 0px*.

- This only works on elements with an explicit width. Block elements will naturally grow to fill the available horizontal space, so we need to give our element a width in order to center it.

The nice thing about the auto-margin trick is that it can be selectively applied to a single child in a container.

For example, let's say we're building a blog. Our article has a bunch of headings and paragraphs and images, and we want them to be laid out normally. But we want pull-quotes to be centered.

*/

.content {
  width: 50%;
  margin-left: auto;
  margin-right: auto;
  background: palevioletred;
  padding: 16px;
}

.auto-margin-wrapper {
  width: 100%;
  height: 200px;
  border: 3px solid silver;
  margin-top: 2rem;
}

/*Card outsite the box exercise
i.e margin peaks out*/

.outside {
  background: #222;
  padding: 32px;
}

.card-outside-box {
  background-color: white;
  padding: 32px;
  border-radius: 8px;
}

.card-outside-box h1 {
  background: deeppink;
  padding: 16px 32px;
  margin-bottom: 24px;
  font-size: 2rem;
  text-align: center;
  border-radius: 4px;
  margin-top: -48px;/*here*/
}


/*Stretched content

So if we have centered text but in the middle an image that fills up the whole container, how do we do that? The container padding is getting in the way!

Images, as well as other “replaced elements” like <video> and <canvas>, are special. They don't automatically expand to fill the available space. Instead, they rely on their intrinsic size.

For example, suppose I take a photo on an old webcam. That photo has a native size of 640 × 480. When I embed this image on the page, using an <img> tag, it'll have a default width of 640px.

This is the problem. width: auto has a different meaning for replaced elements. It doesn't mean “stretch out and fill all of the space”, it means “use your natural width”!*/

.stretched {
  background: #222;
  padding: 32px;
}

.card-stretched {
  background-color: white;
  padding: 32px;
  border-radius: 8px;
}

.stretched-out {/*How to part 1*/
  margin-left: -32px;
  margin-right: -32px;
}

.stretched-out img {/*How to part 2*/
  display: block;
  width: 100%;
}

p, img {
  margin-bottom: 16px;
}


/*FLOW LAYOUT*

Flow layout is the default layout mode. Everything we've seen so far has used Flow layout. A plain HTML document, with no CSS applied, uses Flow layout exclusively. Other layout modes are, including Positioned layout, “Flexible Box” layout (AKA Flexbox), and Grid layout (AKA CSS Grid). 

There are two main element types in Flow layout:

- Block elements: things like headings, paragraphs, footers, asides. The chunks of content that make up a page.

- Inline elements: things like links, or a string of bold text. Generally, inline elements are meant to highlight bits of text, or elements within a block container.

- There's also a third value, inline-block, which is a sort of fusion between the two types.

<div> and <header> are block elements, span and <a> are inline elements.

We can toggle any particular element with the display property:

Transform a particular <a> tag from `inline` to `block`: 
a.nav-link {
  display: block;
}


INLINE ELEMENTS

You can shift things in the inline direction with margin-left and margin-right, since that pushes it around in the inline direction, but you can't give it a width or height. 

There's an exception to this rule: replaced elements.

A replaced element is one that embeds a "foreign" object. This includes:

<img />
<video />
<canvas />

These elements are all technically inline, but they're special: they can affect block layout. You can give them explicit dimensions, or add some margin-top.


BLOCK ELEMENTS

When you place a block level element on the page, its content box greedily expands to fill the entire available horizontal space.

A heading might only need 150px to contain its letters, but if you put it in an 800px container, it will expand to fill 800px of width.

What if we force it to shrink down to the minimum size required for the letters? We can do this with the special width keyword fit-content

h2 {
  width: fit-content;
  border: 2px dotted;
}

It's still a block element even though space to right is available so if you add another p f.ex after it will go underneath it*/


h6 {
  width: fit-content;
  border: 2px dotted;
}

/*INLINE ELEMENTS

Here's an example of an image with a fixed size of 300×300 pixels, sitting in a plain ol' div. The image is taking up the correct size, 300×300, but the parent has a slightly larger height.

The image is 300px tall, but its parent <div> is 306px tall. Where are those extra few pixels coming from?? It's not padding, it's not border, it's not margin…

The reason for this extra “magic space” is that the browser treats inline elements as if they're typography. It makes sense that with text, you'd want a bit of extra space, so that the lines in a paragraph aren't crammed in too tightly.

There are two ways we can fix this problem:

1) Set images to display: block — if you're noticing this problem, there's a good chance your images aren't interspersed with text, so setting them to display as blocks makes sense.

2) Set the line-height on the wrapping div to 0


SPace between inline elements

The following markup creates whitespace between elements:

<img
  src="/cfj-mats/placekitten-100.jpg"
  width="100"
  alt="Cat photo"
/>
<img
  src="/cfj-mats/placekitten-100.jpg"
  width="100"
  alt="Cat photo"
/>
<img
  src="/cfj-mats/placekitten-100.jpg"
  width="100"
  alt="Cat photo"
/>

This happens because HTML is space-sensitive, at least to an extent. The browser can't tell the difference between whitespace added to separate words in a paragraph, and whitespace added to indent our HTML and keep it readable.

BUT IF YOU DO THIS in your markup it has no whitespace between
them:

<img src="/cfj-mats/placekitten-100.jpg" width="100" alt="Cat photo" /><img src="/cfj-mats/placekitten-100.jpg" width="100" alt="Cat photo" /><img src="/cfj-mats/placekitten-100.jpg" width="100" alt="Cat photo" />

How do we solve this problem? Well, it turns out that this issue is specific to Flow layout. So, the simplest thing is to switch the container to use Flexbox. 

Inline elements can line-wrap

Inline elements have one pretty big trick up their sleeves; they can line-wrap.

This paragraph features a multi-line <strong> tag:

This is a paragraph with some very bolded words in it.

Unlike block elements, an inline element can produce shapes other than boxes*/

strong {
  border: 2px solid;
}


/*INLINE-BLOCK

An inline-block element is a block-level element that can be placed in an inline context.

In terms of layout, it's treated as an inline element. We can drop it in the middle of a paragraph, without totally borking the layout. But internally, it acts much more like a block element.

First ex it's an inline-block. Because this tag is now secretly a block-level element, it has access to the full universe of CSS. Usually, properties like width and margin-top have no effect on an inline element, but they do work on inline-block elements.*/

.inline-block strong {
  display: inline-block;
  color: white;
  background-color: red;
  width: 100px;
  margin-top: 32px;
  text-align: center;
}
.inline-block-2 strong {
  /*display: inline-block; - it becomes inline here*/
  color: white;
  background-color: red;
  width: 100px;
  margin-top: 32px;
  text-align: center;
}

.inline-block strong:hover {
  transform: scale(1.2);
}



/*ISSUE WITH INLINE-BLOCK:

Here's the big downside with inline-block: It disables line-wrapping.

Because the link can't line-wrap, it forces the entire link onto the next line, adding an awkward gap.

f.ex this is a link with a line under it: 
good working relationship with design

- it's too long and if needed doesn't break into a new line, it creates a gap, see end of Flow Layout for image

You may be tempted to pick really-short link text, to avoid this problem, but that would be a mistake; descriptive link text is important for accessibility.*/


/*WIDTH ALGORITHMS

When we use percentage-based widths, those percentages are based on the parent element's content space. If the body tag makes 400px of space available, any child with 100% width will become 400px wide, regardless of any other circumstances. So if you set margin on either side of the body tax f.ex


SO IMPORTANT DISTINCTION FROM ABOVE:

Block elements have a default width value of auto, not 100%. width: auto works very similar to margin: auto; it's a hungry value that will grow as much as it's able to, but no more. In the case above, our h1 will grow to consume (100% - 32px), since there is 16px of margin on either side.


Keyword values

Broadly speaking, there are two kinds of values we can specify for width:

- Measurements (100%, 200px, 5rem)
- Keywords (auto, fit-content)

Measurement-based values are either completely explicit (eg. 200px), or relative to the parent's available space (eg. 50%). Keywords, on the other hand, let us specify different sorts of behaviours depending on the context.

We've already seen how auto will let our element greedily consume the available space while respecting any constraints.


MIN-CONTENT

width: min-content

we're specifying that we want our element to become as narrow as it can, based on the child contents. This is a totally different perspective: we aren't sizing based on the space made available by the parent, we're sizing based on the element's children!

It chooses the smallest possible value for width that still contains each word. Whenever it encounters whitespace or a hyphenated word, it'll break it onto a new line.

This value is known as an intrinsic value, while measurements and the auto keyword are extrinsic. */

.min {
  width: min-content;
  background-color: fuchsia;
}


/*MAX-CONTENT

width: max-content

It takes an opposite strategy: it never adds any line-breaks. The element's width will be the smallest value that contains the content, without breaking it up

Pays no attention to the constraints set by the parent. It will size the element based purely on the length of its unbroken children.*/

.max {
  width: max-content;
  background-color: mediumspringgreen;
}

.smax {
  width: max-content;
  background-color: mediumspringgreen;
}

/*FIT-CONTENT

width: fit-content

Here's how it works: like min-content and max-content, the width is based on the size of the children. If that width can fit within the parent container, it behaves just like max-content, not adding any line-breaks.

If the content is too wide to fit in the parent, however, it adds line-breaks as-needed to ensure it never exceeds the available space. It behaves just like width: auto.*/

.fit-content {
  max-width: 16rem;
}

.fit {
  width: fit-content;
  background-color: peachpuff;
  margin-bottom: 16px;
  padding: 8px;
}

/*MIN and MAX WIDTHS

We can add constraints to an element's size using min-width and max-width.

The particularly exciting thing about min-width and max-width is that they let us mix units. We can specify constraints in pixels, but set a percentage width.*/

.box50 {
  width: 50%;
  min-width: 170px;
  max-width: 300px;
  margin: 0 auto;
  border: solid hotpink;
}

.max-width-wrapper {
  max-width: 350px;
  margin-left: auto;
  margin-right: auto;
  padding: 0 16px;
  outline: 1px solid red;
}


/*FIGURES AND CAPTIONS

The <figure> HTML element is fairly niche, but super useful. It allows us to display any sort of “non-typical” content: images, videos, code snippets, widgets, etc. It also lets us caption that content with <figcaption>.

<figure> elements are block-level elements, which means they fill the available horizontal space. But what if we wanted them to shrink to wrap around the image inside?

NB EXAMPLE HERE

If want figure to wrap around an image can use width:min-content. So what happens here is that figure looks at its children and shrinks to fit the widest child, 
so here image is widest, but if figcaption had been longer than img then it would fit that. NB remember figure is a block element so it takes up as much space as possible from one side to the other.

*/


.cat-wrapper {
  outline: 1px solid grey;
  width: 300px;
}

/*.cat {
  width: 300px;
}*/

.figure-wrapper {
  outline: 1px solid red;
}

.figure-wrapper:nth-of-type(1) {
  margin-bottom: 2rem;
}

.figure-wrapper-after {
  width: min-content;
  outline: 1px solid red;
}
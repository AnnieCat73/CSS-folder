/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 0 auto;
}

section {
  padding: 3rem 0;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}



/*New reset

As we've learned, browsers come with a built-in set of CSS styles, known as the “User-Agent Stylesheet”.

Historically, the main goal of a CSS reset has been to ensure consistency between browsers, and to undo all default styles, creating a blank slate. My CSS reset doesn't really do either of these things.

These days, browsers don't have massive discrepancies when it comes to layout or spacing. By and large, browsers implement the CSS specification faithfully, and things behave as you'd expect. So it isn't as necessary anymore.

/*
  1. Use a more-intuitive box-sizing model.
*
*, *::before, *::after {
  box-sizing: border-box;
}

/*
  2. Remove default margin
*
* {
  margin: 0;
}

/*
  3. Allow percentage-based heights in the application
  As discussed in the “Height Algorithms” lesson, using the percentage unit for the height property won't always work. This only works if the parent defines an absolute height (eg. height: 400px), or if all of the ancestors use percentages, all the way up to the root HTML element.
  By setting html and body to have height: 100%, we make it easier for us to use percentage-based heights down the line, if we decide to.*
html, body {
  height: 100%;
}

/*
  Typographic tweaks!
  4. Add accessible line-height
  5. Improve text rendering
*
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

/*
  6. Improve media defaults

  If we try to use an inline element in our layout, though, weird things happen. We have to worry about inline magic space. By setting display: block on all media elements by default, we sidestep a whole category of funky issues.

  I also set max-width: 100%. This is done to keep large images from overflowing, if they're placed in a container that isn't wide enough to contain them. Because images/videos are replaced elements, they don't behave like other elements do.*
img, picture, video, canvas, svg {
  display: block;
  max-width: 100%;
}

/*
  7. Remove built-in form typography styles
*
input, button, textarea, select {
  font: inherit;
}

/*
  8. Avoid text overflows

  hyphens: auto uses hyphens (in languages that support them) to indicate hard wraps. It also makes hard wraps much more common.

  It can be worthwhile if you have very-narrow columns of text, but it can also be a bit distracting. I chose not to include it in the reset, but it's worth experimenting with!
*
p, h1, h2, h3, h4, h5, h6 {
  overflow-wrap: break-word;
  /*hyphens: auto;*
}

/*
  9. Create a root stacking context

  isolation property allows us to create a new stacking context without setting a z-index.

  By creating a stacking context on our application's container, we ensure that everything within our application will participate in an "app-specific" context, rather than the global top-level context. This makes it possible for us to guarantee that elements created using portals (eg. modals, tooltips) will always show up on top of our application.

  We're using the selector #__next here because in the Next.js framework, the application container is given this ID. The specific selector will vary depending on your framework; with Create React App, for example, the root container is #root.*
#root, #__next {
  isolation: isolate;
}


Built-Declarations and inheritance

You don't quite start with a blank canvas; HTML tags do include a few minimal styles. For example, here are the built-in styles for <a> tags, in Chrome 86:

a {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}
These styles are part of the user-agent stylesheet. Each browser includes their own stylesheet full of base styles like this. There are some hard rules in the HTML specification, but for the most part, each browser comes up with its own default styles
/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 0 auto;
}

section {
  padding: 3rem 0;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}



/*New reset

As we've learned, browsers come with a built-in set of CSS styles, known as the “User-Agent Stylesheet”.

Historically, the main goal of a CSS reset has been to ensure consistency between browsers, and to undo all default styles, creating a blank slate. My CSS reset doesn't really do either of these things.

These days, browsers don't have massive discrepancies when it comes to layout or spacing. By and large, browsers implement the CSS specification faithfully, and things behave as you'd expect. So it isn't as necessary anymore.

/*
  1. Use a more-intuitive box-sizing model.
*
*, *::before, *::after {
  box-sizing: border-box;
}

/*
  2. Remove default margin
*
* {
  margin: 0;
}

/*
  3. Allow percentage-based heights in the application
  As discussed in the “Height Algorithms” lesson, using the percentage unit for the height property won't always work. This only works if the parent defines an absolute height (eg. height: 400px), or if all of the ancestors use percentages, all the way up to the root HTML element.
  By setting html and body to have height: 100%, we make it easier for us to use percentage-based heights down the line, if we decide to.*
html, body {
  height: 100%;
}

/*
  Typographic tweaks!
  4. Add accessible line-height
  5. Improve text rendering
*
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

/*
  6. Improve media defaults

  If we try to use an inline element in our layout, though, weird things happen. We have to worry about inline magic space. By setting display: block on all media elements by default, we sidestep a whole category of funky issues.

  I also set max-width: 100%. This is done to keep large images from overflowing, if they're placed in a container that isn't wide enough to contain them. Because images/videos are replaced elements, they don't behave like other elements do.*
img, picture, video, canvas, svg {
  display: block;
  max-width: 100%;
}

/*
  7. Remove built-in form typography styles
*
input, button, textarea, select {
  font: inherit;
}

/*
  8. Avoid text overflows

  hyphens: auto uses hyphens (in languages that support them) to indicate hard wraps. It also makes hard wraps much more common.

  It can be worthwhile if you have very-narrow columns of text, but it can also be a bit distracting. I chose not to include it in the reset, but it's worth experimenting with!
*
p, h1, h2, h3, h4, h5, h6 {
  overflow-wrap: break-word;
  /*hyphens: auto;*
}

/*
  9. Create a root stacking context

  isolation property allows us to create a new stacking context without setting a z-index.

  By creating a stacking context on our application's container, we ensure that everything within our application will participate in an "app-specific" context, rather than the global top-level context. This makes it possible for us to guarantee that elements created using portals (eg. modals, tooltips) will always show up on top of our application.

  We're using the selector #__next here because in the Next.js framework, the application container is given this ID. The specific selector will vary depending on your framework; with Create React App, for example, the root container is #root.*
#root, #__next {
  isolation: isolate;
}


BUILT-IN DECLARATIONS

You don't quite start with a blank canvas; HTML tags do include a few minimal styles. For example, here are the built-in styles for <a> tags, in Chrome 86:

a {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}
These styles are part of the user-agent stylesheet. Each browser includes their own stylesheet full of base styles like this. There are some hard rules in the HTML specification, but for the most part, each browser comes up with its own default styles

As we saw earlier, these are the “built-in” styles for <a> tags:

a {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}
The trouble is that even though color is an inheritable property, it's being overwritten by the default style, color: -webkit-link?.
-webkit-link is a Chrome-specific alias for the default color. You shouldn't use this value in your CSS.

We can fix this by explicitly telling anchor tags to inherit their containing text color:

a {
  color: inherit;
}


INHERITANCE

List of CSS Properties that are Inherited
There doesn’t seem to be a single definitive source that lists all CSS properties that inherit, but below is a list that’s probably correct, based on a few sources:

border-collapse
border-spacing
caption-side
color
cursor
direction
empty-cells
font-family
font-size
font-style
font-variant
font-weight
font-size-adjust
font-stretch
font
letter-spacing
line-height
list-style-image
list-style-position
list-style-type
list-style
orphans
quotes
tab-size
text-align
text-align-last
text-decoration-color
text-indent
text-justify
text-shadow
text-transform
visibility
white-space
widows
word-break
word-spacing
word-wrap


THE CASCADE

Ex:

<style>
  p {
    font-weight: bold;
    color: hsl(0deg 0% 10%);
  }

  .introduction {
    color: violet;
  }
</style>

<p class="introduction">
  Hello world
</p>

We've created two rules, one targeting a tag (p), another targeting a class (introduction). Then, we've created an HTML element that matches them both.

You may already know what happens here: we wind up with a bold, violet paragraph. It plucks the font-weight declaration from the p tag, and the color declaration from the .introduction class.

When the browser needs to display our introduction paragraph on the screen, it first needs to figure out which declarations apply to it. And before it can do that, it needs to collect a set of matching rules. Once it has a list of applicable rules, it works out any conflicts. I imagine this as a sort of deathmatch: if multiple selectors each apply the same property, it pits them against each other. Two fighters enter, but only one emerges.

That's the main idea. The browser will take a set of applicable style rules, and whittle it down to a list of specific declarations that are applicable.

How does it determine which rules win each battle? It depends on the specificity of the selector.

The CSS language includes many different selectors, and each selector has a relative power. For example, classes are "more specific" than tags, so if there is a conflict between a class and a tag, the class wins. IDs, however, are more specific than classes.

 class styles are more specific than tag styles

 CHECK OUT ARTICLE ON CASCADE: https://wattenberger.com/blog/css-cascade


 LOGICAL PROPERTIES

Here are the built-in styles for p tags, in Chrome:

p {
  display: block;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
}

These properties are equivalent to the 4 cardinal directions: margin-top, margin-bottom, margin-left, and margin-right.

margin-block refers to the vertical axis. margin-block-start refers to the top, since block elements are stacked top-to-bottom. Similarly, margin-inline-start refers to the left edge, since "inline" is the horizontal direction, and words are placed left-to-right.

Why use these alternatives? Because not all languages are left-to-right, top-to-bottom. If you were to switch your browser's language to Arabic, margin-inline-start would add spacing to the right instead of to the left, since Arabic is a right-to-left language.

The main selling point for logical properties is internationalization. If you want your product to be available in a left-to-right language like English and a right-to-left language like Arabic, you can save yourself a lot of trouble by using logical properties.

The main argument against using logical properties is browser support. Now, to be clear, browser support for logical properties is very good—at the time of writing, 98% of devices support them. But there are some noticeable gaps, including Internet Explorer 10 and 11, Opera Mini, and relatively-recent versions of Safari.


THE BOX MODEL

Winter Layers
The four aspects that make up the box model are:

Content
Padding
Border
Margin

A helpful analogy is to imagine a person out for a winter walk, wearing a big poofy coat:

illustration of a man in a winter coat, with scarf and hat
The content is the person themselves, the human being inside the coat.
The padding is the polyester stuffing in the coat. The more stuffing there is, the more poofed-up the coat will be, and the more space the person will take up.
The border is the material of the coat. It has a thickness and a color, and it affects the person's appearance.
The margin is the person's “personal space”. As we've learned in recent years, it's good to have 2 meters (6 feet) of space around us.


BOX SIZING

The box-sizing CSS property allows us to change the rules for size calculations. The default value (content-box) only takes the inner content into account, but it offers an alternative value: border-box.

Instead of having to remember to swap box-sizing on every layout element, we can set it as the default value for all elements with this handy CSS snippet:

*,
*::before,
*::after {
  box-sizing: border-box;
}

You might be wondering: why do we need to add *::before and *::after? Shouldn't the wildcard selector (*) select everything?

Well, yes and no. The * selector will select all elements, but ::before and ::after aren't considered elements. They're pseudo-elements. And so we need to select them explicitly.
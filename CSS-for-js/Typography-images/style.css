/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 3rem auto;
}

section {
  padding: 3rem 0;
}

h1 {
  font-size: 2.5rem;
  margin-bottom: 2rem;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}


/*ICONS

SVG 

SVGs tend to look more crisp and sharp.
They're easier to position and use (width instead of font-size makes way more sense!).
They can be more accessible.
They can be multi-color.
They can be tweaked and animated.

What's an SVG?
SVG is a vector image format. This means that instead of storing information about the colors of specific pixels, it stores the instructions for how to draw the image.

It's written in XML, which means it looks an awful lot like HTML. Here's a "Hello world" SVG which draws a pink circle:

 <svg
  viewBox="0 0 100 100"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
</svg>

You can save this into a file called circle.svg and use it like any other image format (for example, <img src="/circle.svg" />). But you can also copy/paste the code directly into your HTML. This is known as "inline SVG":

<html>
<body>
  <h1>Hello World</h1>
  <div class="icon-wrapper">
    <svg
      viewBox="0 0 100 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
    </svg>
  </div>
</body>
</html>

When we inline our SVGs, we can target individual sub-elements with CSS and JS!

/* This will change the circle from pink to green! 
.icon-wrapper circle {
  fill: green;
}

Here are some of my favourites:

Feather icons
icomoon
Material Design icons


ICONS & ACCESSIBILITY

 Screen readers can accurately dictate the text on our page, but they don't know how to deal with our SVG icons.

There are a number of ways we can add additional text information for folks using a screen reader. Here's my favourite:

<button>
  <HelpCircle />
  <span class="visually-hidden">
    Visit the help center
  </span>
</button>

We can tell screen readers to ignore an element using the aria-hidden attribute, f.ex the screen reader may interpret the icon as "Go home go home":

<a href="/">
  Go Home
  <span class="revealed" aria-hidden="true">
    Go Home
  </span>
</a>


SPACING ISSUES

The problem is that SVG elements have a default value of display: inline, and inline elements have "magic space". So may add padding to the icon

To solve it use descendant selector so 

button {
  padding: 0;
}

button and svg {
  display: block
}


IMAGES

The Fundamentals

The img HTML tag has two required attributes:

src
alt

alt is a property that allows you to specify "alternative text". It's meant to serve as a description of what the image contains.

You've probably heard that alt text is important. It provides critical context to folks who aren't able to see the images, whether because of a visual disability or because of a faulty network connection.

Not all images require alternative text. If the image is purely decorative and has no semantic value, you can specify alt="" to indicate that screen readers can ignore it.

How do we know if an image is semantically valuable? I try and imagine what the user experience would be like if the image failed to load. If I don't know what's depicted in the image, would it make the product harder to use? If so, it definitely requires alt text.

In some cases, an image isn't critical to the user experience, but it still provides value. For example, Wikipedia articles include relevant photos. While the article still makes sense without these photos, they provide valuable context, and should be described with alt text.

If you're not sure if an image qualifies as decorative or not, it's best to err on the safe side, and add alt text. Folks using screen readers can easily skip past images, so don't worry about "polluting" the experience for them!


ALT TEXT

The goal with alternative text should be to convey the semantic meaning of the image to the user.

Like many sites, the company logo is in the top-left corner. Let's assume that it links to the product's homepage.

What should the alt text be, for this green corner logo?

Many developers will describe the image as they see it, something like “Abstract green octopus illustration”

Here's what I'd set it to:

<img
  alt="Octo Analytics logo - Home"
  src="/logo.png"
/>

We're letting the user know that it's a logo, and that it leads to the homepage. 

One more thing: Alt text should not include additional contextual information. For example, here's what you shouldn't do:

<img
  src="/landscape.jpg"
  alt="Painting of a beautiful landscape. Artist: C. Essess"
/>
Instead, the attribution should go in a <figcaption> below the image:

<figure>
  <img
    src="/landscape.jpg"
    alt="Painting of a beautiful landscape."
  />
  <figcaption>
    Artist: C. Essess
  </figcaption>
</figure>

The important thing is that you're writing alt text with the right goal in mind. You're not simply describing images for people who can't see them. You're trying to provide the context needed so that people can navigate and use your website / web application.


IMG VS BACKGROUND-IMAGE

It's important to use an img tag for semantically-meaningful images, because background images can't be given alt text.

A mistake developers often make is to use background-image on a semantically-relevant image because they need to take advantage of related CSS properties like background-size and background-position.

IMAGES FIT AND POSITION

img is known as a "replaced element". Unlike other DOM nodes, the browser replaces the <img> tag with a foreign entity. images are inline elements, and inline elements "go with the flow"; we generally can't give an inline element a height, since that would mess with the layout. And yet, images can be given a height.

Images come with their own intrinsic size, based on the dimensions of the image file. In this example, our image has a natural size of 400 × 300

<!--
  Because the image is naturally
  400 × 300, it'll take up that
  size by default.
-->
<img
  alt="Blank image showing its own measurements, 400 by 300"
  src="/cfj-mats/size-400-300.png"
/>

Images also have an intrinsic aspect ratio. This means that if we only supply one dimension, either width or height, the other dimension scales up or down as-needed, to preserve the aspect ratio

img {
  width: 200px;
}

Even though we haven't set a height, it scales down to 150px, to preserve the same proportions.

What happens if we provide both a width and a height? What if it doesn't match the image's natural aspect ratio?

By default, the image will distort. It's impossible to display an image accurately when we change its proportions.

 A better alternative in most cases is to crop the image, trimming off any excess that can't fit in the specified rectangle.

For many years, this was only possible with background images. Fortunately, modern CSS includes a couple tools that can help us out in this case. First, let's look at object-fit

“Object”?
The object-fit property works on images, but it isn't exclusive to images: it can also be used on <video> tags!

In general, it's less relevant with videos, but it can come in handy when working with "video GIFs" (short videos that look/act like animated GIFs, but come in at a fraction of the size).


OBJECT-FIT

It takes a few values to control how the image is presented

fill - default - fills whole space but may look distorted
contain - preserves the whole image but shrinks it down - white space
contain - crops it fill the space
none - it becomes tiny in topw left corner with whitespace filling rest


OBJECT POSITION

object-position lets us specify how the image should be translated or cropped within its available space. It's very similar to background-position, if you're familiar with that property.

In its purest form, object-position takes two numbers: one for the horizontal offset, and one for the vertical offset.

.thing {
  /* Anchor to the top-left corner *
  /* Same as "0% 0%" *
  object-position: left top;
}

Example from Fit and Position

Swoops - SVG IMPORTANT

One of the neat things about SVG images is that they can grow to any size without loss of quality.

<img
  alt=""
  src="/cfj-mats/swoops.svg"
/>

body {
  margin: 0;
  padding: 0;
}

img {
  width: 100%;
  min-height:150px;
  object-fit: cover;
  object-position: left center;
}


IMAGES AND FLEXBOX

Because the image tag is fundamentally weird, it doesn't always behave the way we expect when it interacts with certain layout modes. This is especially true when it comes to Flexbox.*/

.flex-img {
  display: flex;
  gap: 8px;
}

img {
  flex: 1;
}
.twice-as-big {
  flex: 2;
}

/*Why is the first image above so skinny.
Here axis is horizontal so default alignment is stretch
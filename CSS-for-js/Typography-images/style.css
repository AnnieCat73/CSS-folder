/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 3rem auto;
}

section {
  padding: 3rem 0;
}

h1 {
  font-size: 2.5rem;
  margin-bottom: 2rem;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}


/*ICONS

SVG 

SVGs tend to look more crisp and sharp.
They're easier to position and use (width instead of font-size makes way more sense!).
They can be more accessible.
They can be multi-color.
They can be tweaked and animated.

What's an SVG?
SVG is a vector image format. This means that instead of storing information about the colors of specific pixels, it stores the instructions for how to draw the image.

It's written in XML, which means it looks an awful lot like HTML. Here's a "Hello world" SVG which draws a pink circle:

 <svg
  viewBox="0 0 100 100"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
</svg>

You can save this into a file called circle.svg and use it like any other image format (for example, <img src="/circle.svg" />). But you can also copy/paste the code directly into your HTML. This is known as "inline SVG":

<html>
<body>
  <h1>Hello World</h1>
  <div class="icon-wrapper">
    <svg
      viewBox="0 0 100 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
    </svg>
  </div>
</body>
</html>

When we inline our SVGs, we can target individual sub-elements with CSS and JS!

/* This will change the circle from pink to green! 
.icon-wrapper circle {
  fill: green;
}

Here are some of my favourites:

Feather icons
icomoon
Material Design icons


ICONS & ACCESSIBILITY

 Screen readers can accurately dictate the text on our page, but they don't know how to deal with our SVG icons.

There are a number of ways we can add additional text information for folks using a screen reader. Here's my favourite:

<button>
  <HelpCircle />
  <span class="visually-hidden">
    Visit the help center
  </span>
</button>

We can tell screen readers to ignore an element using the aria-hidden attribute, f.ex the screen reader may interpret the icon as "Go home go home":

<a href="/">
  Go Home
  <span class="revealed" aria-hidden="true">
    Go Home
  </span>
</a>


SPACING ISSUES

The problem is that SVG elements have a default value of display: inline, and inline elements have "magic space". So may add padding to the icon

To solve it use descendant selector so 

button {
  padding: 0;
}

button and svg {
  display: block
}
/* reset */
 
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4 {
  line-height: 1;
}

body,
h1,
h2,
h3,
p,
dl,
dd,
figure {
  margin: 0;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

input,
button,
textarea,
select {
  font: inherit;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
 }

body {
  line-height: 1.6;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  max-width: 1440px;
  margin: 3rem auto;
}

section {
  padding: 3rem 0;
}

h1 {
  font-size: 2.5rem;
  margin-bottom: 2rem;
}

h2 {
  margin-bottom: 1.5rem;
}

h3 {
  margin-bottom: 1rem;
}

.m-top {
  margin-top: 3.5rem;
}
.m-bottom {
  margin-bottom: 2rem;
}


/*ICONS

SVG 

SVGs tend to look more crisp and sharp.
They're easier to position and use (width instead of font-size makes way more sense!).
They can be more accessible.
They can be multi-color.
They can be tweaked and animated.

What's an SVG?
SVG is a vector image format. This means that instead of storing information about the colors of specific pixels, it stores the instructions for how to draw the image.

It's written in XML, which means it looks an awful lot like HTML. Here's a "Hello world" SVG which draws a pink circle:

 <svg
  viewBox="0 0 100 100"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
</svg>

You can save this into a file called circle.svg and use it like any other image format (for example, <img src="/circle.svg" />). But you can also copy/paste the code directly into your HTML. This is known as "inline SVG":

<html>
<body>
  <h1>Hello World</h1>
  <div class="icon-wrapper">
    <svg
      viewBox="0 0 100 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="50" cy="50" r="40" stroke="black" fill="pink" />
    </svg>
  </div>
</body>
</html>

When we inline our SVGs, we can target individual sub-elements with CSS and JS!

/* This will change the circle from pink to green! 
.icon-wrapper circle {
  fill: green;
}

Here are some of my favourites:

Feather icons
icomoon
Material Design icons


ICONS & ACCESSIBILITY

 Screen readers can accurately dictate the text on our page, but they don't know how to deal with our SVG icons.

There are a number of ways we can add additional text information for folks using a screen reader. Here's my favourite:

<button>
  <HelpCircle />
  <span class="visually-hidden">
    Visit the help center
  </span>
</button>

We can tell screen readers to ignore an element using the aria-hidden attribute, f.ex the screen reader may interpret the icon as "Go home go home":

<a href="/">
  Go Home
  <span class="revealed" aria-hidden="true">
    Go Home
  </span>
</a>


SPACING ISSUES

The problem is that SVG elements have a default value of display: inline, and inline elements have "magic space". So may add padding to the icon

To solve it use descendant selector so 

button {
  padding: 0;
}

button and svg {
  display: block
}


IMAGES

The Fundamentals

The img HTML tag has two required attributes:

src
alt

alt is a property that allows you to specify "alternative text". It's meant to serve as a description of what the image contains.

You've probably heard that alt text is important. It provides critical context to folks who aren't able to see the images, whether because of a visual disability or because of a faulty network connection.

Not all images require alternative text. If the image is purely decorative and has no semantic value, you can specify alt="" to indicate that screen readers can ignore it.

How do we know if an image is semantically valuable? I try and imagine what the user experience would be like if the image failed to load. If I don't know what's depicted in the image, would it make the product harder to use? If so, it definitely requires alt text.

In some cases, an image isn't critical to the user experience, but it still provides value. For example, Wikipedia articles include relevant photos. While the article still makes sense without these photos, they provide valuable context, and should be described with alt text.

If you're not sure if an image qualifies as decorative or not, it's best to err on the safe side, and add alt text. Folks using screen readers can easily skip past images, so don't worry about "polluting" the experience for them!


ALT TEXT

The goal with alternative text should be to convey the semantic meaning of the image to the user.

Like many sites, the company logo is in the top-left corner. Let's assume that it links to the product's homepage.

What should the alt text be, for this green corner logo?

Many developers will describe the image as they see it, something like “Abstract green octopus illustration”

Here's what I'd set it to:

<img
  alt="Octo Analytics logo - Home"
  src="/logo.png"
/>

We're letting the user know that it's a logo, and that it leads to the homepage. 

One more thing: Alt text should not include additional contextual information. For example, here's what you shouldn't do:

<img
  src="/landscape.jpg"
  alt="Painting of a beautiful landscape. Artist: C. Essess"
/>
Instead, the attribution should go in a <figcaption> below the image:

<figure>
  <img
    src="/landscape.jpg"
    alt="Painting of a beautiful landscape."
  />
  <figcaption>
    Artist: C. Essess
  </figcaption>
</figure>

The important thing is that you're writing alt text with the right goal in mind. You're not simply describing images for people who can't see them. You're trying to provide the context needed so that people can navigate and use your website / web application.


IMG VS BACKGROUND-IMAGE

It's important to use an img tag for semantically-meaningful images, because background images can't be given alt text.

A mistake developers often make is to use background-image on a semantically-relevant image because they need to take advantage of related CSS properties like background-size and background-position.

IMAGES FIT AND POSITION

img is known as a "replaced element". Unlike other DOM nodes, the browser replaces the <img> tag with a foreign entity. images are inline elements, and inline elements "go with the flow"; we generally can't give an inline element a height, since that would mess with the layout. And yet, images can be given a height.

Images come with their own intrinsic size, based on the dimensions of the image file. In this example, our image has a natural size of 400 × 300

<!--
  Because the image is naturally
  400 × 300, it'll take up that
  size by default.
-->
<img
  alt="Blank image showing its own measurements, 400 by 300"
  src="/cfj-mats/size-400-300.png"
/>

Images also have an intrinsic aspect ratio. This means that if we only supply one dimension, either width or height, the other dimension scales up or down as-needed, to preserve the aspect ratio

img {
  width: 200px;
}

Even though we haven't set a height, it scales down to 150px, to preserve the same proportions.

What happens if we provide both a width and a height? What if it doesn't match the image's natural aspect ratio?

By default, the image will distort. It's impossible to display an image accurately when we change its proportions.

 A better alternative in most cases is to crop the image, trimming off any excess that can't fit in the specified rectangle.

For many years, this was only possible with background images. Fortunately, modern CSS includes a couple tools that can help us out in this case. First, let's look at object-fit

“Object”?
The object-fit property works on images, but it isn't exclusive to images: it can also be used on <video> tags!

In general, it's less relevant with videos, but it can come in handy when working with "video GIFs" (short videos that look/act like animated GIFs, but come in at a fraction of the size).


OBJECT-FIT

It takes a few values to control how the image is presented

fill - default - fills whole space but may look distorted
contain - preserves the whole image but shrinks it down - white space
contain - crops it fill the space
none - it becomes tiny in topw left corner with whitespace filling rest


OBJECT POSITION

object-position lets us specify how the image should be translated or cropped within its available space. It's very similar to background-position, if you're familiar with that property.

In its purest form, object-position takes two numbers: one for the horizontal offset, and one for the vertical offset.

.thing {
  /* Anchor to the top-left corner *
  /* Same as "0% 0%" *
  object-position: left top;
}

Example from Fit and Position

Swoops - SVG IMPORTANT

One of the neat things about SVG images is that they can grow to any size without loss of quality.

<img
  alt=""
  src="/cfj-mats/swoops.svg"
/>

body {
  margin: 0;
  padding: 0;
}

img {
  width: 100%;
  min-height:150px;
  object-fit: cover;
  object-position: left center;
}


IMAGES AND FLEXBOX

Because the image tag is fundamentally weird, it doesn't always behave the way we expect when it interacts with certain layout modes. This is especially true when it comes to Flexbox.

/*Why is the first image above so skinny.
Here axis is horizontal so default alignment is stretch*/

.flex-img {
  display: flex;
  gap: 8px;
}

img {
  flex: 1;
}
.twice-as-big {
  flex: 2;
}


/*SOLUTION IF JUST USE IMG ITSELF AS A FLEX ITEM*/
.flex-img-solution1 {
  display: flex;
  gap: 8px;
}

img {
  flex: 1;
  min-width: 0; /*HERE*/
}


/*BUT BETTER TO THINK OF IMAGES AS BLOCKS
IT DOESN'T BELONG AS A DIRECT CHILD OF A FLEX PARENT
IT SHOULD BE IN A CONTAINER I.E DIV

*/


.flex-img-propersolution {
  display: flex;
  gap: 8px;
}

/*undo min-width first and no-flex*/
.no-minw {
  min-width: unset;
}

.no-flex {
  flex: unset;
}

/*then add flex: 1 on col class*/

.col {
  flex: 1;
}

/*then set img to 100% to fill its div or container*/

img {
  width: 100%;
}


/*SO FOR FLEXBOX ADD A DIV AROUND THE IMAGE
SET THE DIV TO HAVE A flex: 1
SET THE IMG ITSELF TO width: 100%*/


/*FLEXBOX EXERCISE*/

.main-wrapper {
  display: flex;
  flex-wrap: wrap;
  gap: 32px 0;
  background-color:azure;
}

.image-wrapper,
.reviews {
 flex: 1; /*should equally share that space*/
}

.image-wrapper img {
  width: 100%;
  min-width: 300px;
  /*object-position: -32px 0;*/
}

.reviews {
  text-align: center;
  
}

.average-rating {
  font-size: 1.25rem;
  margin-top: 32px;
  color: gold;
  font-style: italic;
}

.book-img {
  /*
    We'll learn more about this fancy
    property in a future module!
  */
  filter:
    drop-shadow(
      -8px
      32px
      10px
      hsl(260deg 50% 4% / 0.5)
    );
}


/*ASPECT RATIO

Images have an intrinsic aspect ratio. 

what is an intrinic ratio? So, having an intrinsic ratio in this case means that an element will maintain its aspect ratio when resized - think of an <img /> with max-width: 100% for example - change the width of it's parent and it will change size - but keep the same shape.

The 3 images above are each given the same height (200px), but they wind up taking up drastically different widths, because of their natural aspect ratios.

What if we wanted them all to have the same aspect ratio? We could accomplish this by giving them all the same width and height, and using object-fit to avoid stretching

img {
  width: 200px;
  height: 200px;
  object-fit: cover;
}

How can we scale our images proportionally, at a prescribed aspect ratio?

The aspect-ratio property takes two slash-separated numbers, like 4 / 3 or 7 / 11. This is a ratio of width to height; an aspect ratio of 2 / 1 means that the image will be twice as wide as it is tall.

The aspect-ratio property isn't specific to images, either; it works on any element, including notoriously-tricky ones like <video> tags or iframes.

Padding fallback
The aspect-ratio has very solid browser support nowadays, but it'll never be supported in Internet Explorer. If we want to support all browsers, we can rely on an old hack using padding-bottom.

Here's what the code looks like:

<style>
  .image-wrapper {
    flex: 1;
  }
  .padding-hack {
    height: 0px;
    padding-bottom: 100%;
    position: relative;
  }
  img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>

<section>
  <div class="image-wrapper">
    <div class="padding-hack">
      <img
        alt="A wide-open outdoor concrete area. Architecture"
        src="/cfj-mats/architecture-hugo-sousa.jpg"
      />
    </div>
  </div>
  <div class="image-wrapper">
    <div class="padding-hack">
      <img
        alt="A modular building against a blue sky. Architecture"
        src="/cfj-mats/architecture-joel-filipe.jpg"
      />
    </div>
  </div>
  <div class="image-wrapper">
    <div class="padding-hack">
      <img
        alt="A unique building with inset curves. Architecture"
        src="/cfj-mats/architecture-julien-moreau.jpg"
      />
    </div>
  </div>
</section>

The .padding-hack element has been given a height of 0px, so its content box is 228px by 0px. But the resulting image is square, because it has 228px of bottom padding, exactly the same amount as the width.

As we saw in Module 1, percentages in padding always refer to width. When we set padding-bottom: 50%, for example, we're saying that the element's bottom padding should be half of its width. Not its height.

So by combining 0px height with a percentage-based padding-bottom, we can recreate any aspect ratio:

.padding-hack {
  /* Equivalent to `aspect-ratio: 2 / 1` *
  height: 0px;
  padding-bottom: 50%;
}

.padding-hack-other {
  /* Equivalent to `aspect-ratio: 5 / 7` *
  height: 0px;
  padding-bottom: calc(7 / 5 * 100%);
}

The problem with this alternative is that the element's content box will be 0px tall. We need this element to hold an image, but it can't do it with 0px of usable space!

We can solve that with absolute positioning. The .padding-hack element becomes a containing block with position: relative. Our image uses absolute positioning to take it out of flow and fill that containing block.

This fallback approach is a pain. It's hacky and it pollutes our markup. Is there an alternative?


IMPORTANT

In most cases, the aspect-ratio property is used to add a bit of visual polish, for presentational purposes. It isn't usually required for functionality.

Given that most browsers support it, it's reasonable to ask: can we start using it, and provide a different-but-still-good alternative experience, for those using unsupported browsers?

<style>
  img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  @supports (aspect-ratio: 1 / 1) {
    img {
      height: revert;
      aspect-ratio: 1 / 1;
    }
  }
</style>

<section>
  <div class="image-wrapper">
    <img
      alt="A wide-open outdoor concrete area. Architecture"
      src="/cfj-mats/architecture-hugo-sousa.jpg"
    />
  </div>
</section>


RESPONSIVE IMAGES

modern screens come in all sorts of configurations and densities.

If we render an image at its native size, it's going to be fuzzy on a high-DPI display. To keep things crisp, we need to serve different images depending on the screen's pixel ratio.

When exporting assets from the design tool, it's common to export 2 or 3 versions of the image. The ratio is generally included in the filename, like this:

cat.jpg (300 × 300)
cat@2x.jpg (600 × 600)
cat@3x.jpg (900 × 900)

NB SEE ADDY OSMANI IMAGE OPTIMIZATION

The srcset attribute
The quickest way to get up and running with responsive images is to use the srcset HTML attribute:

<img
  alt=""
  src="/cfj-mats/responsive-diamond.png"
  srcset="
    /cfj-mats/responsive-diamond.png 1x,
    /cfj-mats/responsive-diamond@2x.png 2x,
    /cfj-mats/responsive-diamond@3x.png 3x
  "
/>

srcset is essentially a "plural" version of src. The browser will scan through the list and apply the first one that matches.

We keep a redundant src property strictly for older browsers: srcset enjoys universal browser support amongst modern browsers, but the src attribute ensures that IE users will still see our images.

To help debug, the browser devtools will let you know which source is currently being served if you hover over the URL in the Elements pane


THE PICTURE ELEMENT

There's another way to solve the same problem: the <picture> element!

<picture>
  <source
    srcset="
      /cfj-mats/responsive-diamond.png 1x,
      /cfj-mats/responsive-diamond@2x.png 2x,
      /cfj-mats/responsive-diamond@3x.png 3x
    "
  />
  <img
    alt=""
    src="/cfj-mats/responsive-diamond.png"
  />
</picture>

The benefit to this approach is that we can specify multiple sources. This allows us to supply different file formats

<picture>
  <source
    type="image/avif"
    srcset="
      /cfj-mats/responsive-diamond.avif 1x,
      /cfj-mats/responsive-diamond@2x.avif 2x,
      /cfj-mats/responsive-diamond@3x.avif 3x
    "
  />
  <source
    type="image/webp"
    srcset="
      /cfj-mats/responsive-diamond.webp 1x,
      /cfj-mats/responsive-diamond@2x.webp 2x,
      /cfj-mats/responsive-diamond@3x.webp 3x
    "
  />
  <img
    alt=""
    src="/cfj-mats/responsive-diamond.png"
  />
</picture>

It's based on the lessons learned in video compression, and it creates dramatically smaller images; in this example, the .avif version of our 3x image is 75% smaller than the .png!

At the time of writing, only Chrome, Firefox, and Opera support AVIF. If we tried to use an AVIF image in an <img> tag, it would render as a broken image icon in other browsers.

<picture> allows us to use modern image formats in a safe way, by providing fallbacks for other browsers.

When the browser encounters a <picture> tag, it scans through the <source> children, and the individual paths within srcset. The order matters: When the browser finds a match, it will download the image from the server and show it to the user. We want our smallest files (AVIF) to be on top.